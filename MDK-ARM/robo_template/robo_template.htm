<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [robo_template\robo_template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image robo_template\robo_template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Nov 27 15:00:27 2024
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Srew_Motor_PIDControlTask::update(unsigned int) &rArr; PlaySoundManageTask::playSound(Sound) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[116]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[116]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[187]">robo_lib::Error::Error_Handler()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[187]">robo_lib::Error::Error_Handler()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(.text.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from stm32f4xx_it.o(.text.CAN1_RX1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(.text.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f4xx_it.o(.text.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from stm32f4xx_it.o(.text.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f4xx_it.o(.text.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from stm32f4xx_it.o(.text.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from main_1.o(.text.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from main_1.o(.text.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from main_1.o(.text.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8b]">_GLOBAL__sub_I_main.cpp</a> from main_1.o(.text._GLOBAL__sub_I_main.cpp) referenced from main_1.o(.init_array)
 <LI><a href="#[60]">Task_Robot::~Task_Robot__deallocating()</a> from screwmotortask.o(.text._ZN10Task_RobotD0Ev) referenced from screwmotortask.o(.rodata._ZTV10Task_Robot)
 <LI><a href="#[64]">CANSendTask::init()</a> from cansendtask.o(.text._ZN11CANSendTask4initEv) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[65]">CANSendTask::uninit()</a> from cansendtask.o(.text._ZN11CANSendTask6uninitEv) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[63]">CANSendTask::update(unsigned int)</a> from cansendtask.o(.text._ZN11CANSendTask6updateEj) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[62]">CANSendTask::~CANSendTask__deallocating()</a> from cansendtask.o(.text._ZN11CANSendTaskD0Ev) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[68]">CANSyncTask::init()</a> from cansynctask.o(.text._ZN11CANSyncTask4initEv) referenced from cansynctask.o(.rodata._ZTV11CANSyncTask)
 <LI><a href="#[69]">CANSyncTask::uninit()</a> from cansynctask.o(.text._ZN11CANSyncTask6uninitEv) referenced from cansynctask.o(.rodata._ZTV11CANSyncTask)
 <LI><a href="#[67]">CANSyncTask::update(unsigned int)</a> from cansynctask.o(.text._ZN11CANSyncTask6updateEj) referenced from cansynctask.o(.rodata._ZTV11CANSyncTask)
 <LI><a href="#[66]">CANSyncTask::~CANSyncTask__deallocating()</a> from cansynctask.o(.text._ZN11CANSyncTaskD0Ev) referenced from cansynctask.o(.rodata._ZTV11CANSyncTask)
 <LI><a href="#[6c]">PlaySoundTask::init()</a> from playsound.o(.text._ZN13PlaySoundTask4initEv) referenced from playsound.o(.rodata._ZTV13PlaySoundTask)
 <LI><a href="#[6d]">PlaySoundTask::uninit()</a> from playsound.o(.text._ZN13PlaySoundTask6uninitEv) referenced from playsound.o(.rodata._ZTV13PlaySoundTask)
 <LI><a href="#[6b]">PlaySoundTask::update(unsigned int)</a> from playsound.o(.text._ZN13PlaySoundTask6updateEj) referenced from playsound.o(.rodata._ZTV13PlaySoundTask)
 <LI><a href="#[6a]">PlaySoundTask::~PlaySoundTask__deallocating()</a> from playsound.o(.text._ZN13PlaySoundTaskD0Ev) referenced from playsound.o(.rodata._ZTV13PlaySoundTask)
 <LI><a href="#[6e]">Task_RoboBase::~Task_RoboBase__deallocating()</a> from motor_dm_task.o(.text._ZN13Task_RoboBaseD0Ev) referenced from motor_dm_task.o(.rodata._ZTV13Task_RoboBase)
 <LI><a href="#[71]">PIDControlTask::init()</a> from pidcontroltask.o(.text._ZN14PIDControlTask4initEv) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[72]">PIDControlTask::uninit()</a> from pidcontroltask.o(.text._ZN14PIDControlTask6uninitEv) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[70]">PIDControlTask::update(unsigned int)</a> from pidcontroltask.o(.text._ZN14PIDControlTask6updateEj) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[6f]">PIDControlTask::~PIDControlTask__deallocating()</a> from pidcontroltask.o(.text._ZN14PIDControlTaskD0Ev) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[75]">PlaySoundManageTask::init()</a> from soundmanagetask.o(.text._ZN19PlaySoundManageTask4initEv) referenced from soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
 <LI><a href="#[76]">PlaySoundManageTask::uninit()</a> from soundmanagetask.o(.text._ZN19PlaySoundManageTask6uninitEv) referenced from soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
 <LI><a href="#[74]">PlaySoundManageTask::update(unsigned int)</a> from soundmanagetask.o(.text._ZN19PlaySoundManageTask6updateEj) referenced from soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
 <LI><a href="#[73]">PlaySoundManageTask::~PlaySoundManageTask__deallocating()</a> from soundmanagetask.o(.text._ZN19PlaySoundManageTaskD0Ev) referenced from soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
 <LI><a href="#[79]">Motor_RM_PIDControlTask::init()</a> from motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask4initEv) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[7a]">Motor_RM_PIDControlTask::uninit()</a> from motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask6uninitEv) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[78]">Motor_RM_PIDControlTask::update(unsigned int)</a> from motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask6updateEj) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[77]">Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating()</a> from motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTaskD0Ev) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[7d]">Srew_Motor_PIDControlTask::init()</a> from screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTask4initEv) referenced from screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
 <LI><a href="#[7e]">Srew_Motor_PIDControlTask::uninit()</a> from screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTask6uninitEv) referenced from screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
 <LI><a href="#[7c]">Srew_Motor_PIDControlTask::update(unsigned int)</a> from screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTask6updateEj) referenced from screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
 <LI><a href="#[7b]">Srew_Motor_PIDControlTask::~Srew_Motor_PIDControlTask__deallocating()</a> from screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTaskD0Ev) referenced from screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
 <LI><a href="#[80]">Robot::run()</a> from robot.o(.text._ZN5Robot3runEv) referenced from robot.o(.rodata._ZTV5Robot)
 <LI><a href="#[7f]">Robot::init()</a> from robot.o(.text._ZN5Robot4initEv) referenced from robot.o(.rodata._ZTV5Robot)
 <LI><a href="#[5e]">RoboBase::~RoboBase__sub_object()</a> from main_1.o(.text._ZN8RoboBaseD2Ev) referenced 2 times from main_1.o(.text.__cxx_global_var_init)
 <LI><a href="#[81]">robo_lib::Motor_Backend::publishMeasurement()</a> from motor_backend.o(.text._ZN8robo_lib13Motor_Backend18publishMeasurementEv) referenced from motor_backend.o(.rodata._ZTVN8robo_lib13Motor_BackendE)
 <LI><a href="#[81]">robo_lib::Motor_Backend::publishMeasurement()</a> from motor_backend.o(.text._ZN8robo_lib13Motor_Backend18publishMeasurementEv) referenced from motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
 <LI><a href="#[83]">robo_lib::RCProtocol_DBUS::processByte(unsigned char const volatile*)</a> from rcprotocol_dbus.o(.text._ZN8robo_lib15RCProtocol_DBUS11processByteEPVKh) referenced from rcprotocol_dbus.o(.rodata._ZTVN8robo_lib15RCProtocol_DBUSE)
 <LI><a href="#[82]">robo_lib::RCProtocol_DBUS::init()</a> from rcprotocol_dbus.o(.text._ZN8robo_lib15RCProtocol_DBUS4initEv) referenced from rcprotocol_dbus.o(.rodata._ZTVN8robo_lib15RCProtocol_DBUSE)
 <LI><a href="#[84]">robo_lib::RCProtocol_DBUS::uninit()</a> from rcprotocol_dbus.o(.text._ZN8robo_lib15RCProtocol_DBUS6uninitEv) referenced from rcprotocol_dbus.o(.rodata._ZTVN8robo_lib15RCProtocol_DBUSE)
 <LI><a href="#[88]">robo_lib::Motor_RM::updateMeasurement()</a> from motor_rm.o(.text._ZN8robo_lib8Motor_RM17updateMeasurementEv) referenced from motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
 <LI><a href="#[85]">robo_lib::Motor_RM::init()</a> from motor_rm.o(.text._ZN8robo_lib8Motor_RM4initEv) referenced from motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
 <LI><a href="#[87]">robo_lib::Motor_RM::uninit()</a> from motor_rm.o(.text._ZN8robo_lib8Motor_RM6uninitEv) referenced from motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
 <LI><a href="#[86]">robo_lib::Motor_RM::update(unsigned int)</a> from motor_rm.o(.text._ZN8robo_lib8Motor_RM6updateEj) referenced from motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
 <LI><a href="#[89]">robo_lib::SimpleAdd&lang;float&rang;::operator()(float, float)</a> from advancedadd.o(.text._ZN8robo_lib9SimpleAddIfEclEff) referenced from advancedadd.o(.rodata._ZTVN8robo_lib9SimpleAddIfEE)
 <LI><a href="#[8a]">robo_lib::Task_Base::~Task_Base__deallocating()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD0Ev) referenced from screwmotortask.o(.rodata._ZTVN8robo_lib9Task_BaseE)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from screwmotortask.o(.rodata._ZTV10Task_Robot)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from cansendtask.o(.rodata._ZTV11CANSendTask)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from cansynctask.o(.rodata._ZTV11CANSyncTask)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from playsound.o(.rodata._ZTV13PlaySoundTask)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from motor_dm_task.o(.rodata._ZTV13Task_RoboBase)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from pidcontroltask.o(.rodata._ZTV14PIDControlTask)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
 <LI><a href="#[5f]">robo_lib::Task_Base::~Task_Base__sub_object()</a> from screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev) referenced from screwmotortask.o(.rodata._ZTVN8robo_lib9Task_BaseE)
 <LI><a href="#[61]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 3 times from screwmotortask.o(.rodata._ZTV10Task_Robot)
 <LI><a href="#[61]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 2 times from main_1.o(.rodata._ZTV11ControlBase)
 <LI><a href="#[61]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 3 times from motor_dm_task.o(.rodata._ZTV13Task_RoboBase)
 <LI><a href="#[61]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 2 times from main_1.o(.rodata._ZTV8RoboBase)
 <LI><a href="#[61]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 4 times from motor_backend.o(.rodata._ZTVN8robo_lib13Motor_BackendE)
 <LI><a href="#[61]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 3 times from rcprotocol_backend.o(.rodata._ZTVN8robo_lib18RCProtocol_BackendE)
 <LI><a href="#[61]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 3 times from screwmotortask.o(.rodata._ZTVN8robo_lib9Task_BaseE)
 <LI><a href="#[5c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[90]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[91]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1a5]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))

<P><STRONG><a name="[1a6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[9d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[93]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[95]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[97]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1bc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1bf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1c0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_TIM8_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b9]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c6]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[a6]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Helper::Helper__sub_object()
</UL>

<P><STRONG><a name="[a8]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1c7]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::get_Params()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::PlaySoundTask__sub_object(Robot&, unsigned short*, unsigned short, Play_Type, unsigned int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[aa]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[ad]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[a5]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ae]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[a4]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[ab]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[b0]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[1d1]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b2]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[96]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[b4]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1d5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[af]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1d6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b1]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1db]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[b5]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[b3]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ba]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[bb]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[bc]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main_1.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[11e]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_ADC_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::init(__CAN_HandleTypeDef*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned short)
</UL>

<P><STRONG><a name="[19a]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::update(unsigned int)
</UL>

<P><STRONG><a name="[195]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::init(__CAN_HandleTypeDef*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned short)
</UL>

<P><STRONG><a name="[d0]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[199]"></a>HAL_CAN_GetTxMailboxesFreeLevel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_GetTxMailboxesFreeLevel))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::update(unsigned int)
</UL>

<P><STRONG><a name="[bd]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_CAN_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, can.o(.text.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, main_1.o(.text.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getCAN2DevicePointer()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getCAN1DevicePointer()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::micros()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_CAN_Start</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::init(__CAN_HandleTypeDef*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned short)
</UL>

<P><STRONG><a name="[c4]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_DMA_Abort</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e0]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_1.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Helper::setLED(unsigned char, unsigned char, unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_I2C_Init</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e4]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>HAL_InitTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[e7]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f1]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ef]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f3]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 840 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[f4]"></a>HAL_SPI_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[101]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main_1.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[111]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 736 bytes, Stack size 64 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[135]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>MX_ADC1_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, adc.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>MX_ADC3_Init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, adc.o(.text.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>MX_CAN1_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, can.o(.text.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>MX_CAN2_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, can.o(.text.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>MX_DMA_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>MX_GPIO_Init</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>MX_I2C2_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>MX_I2C3_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>MX_SPI1_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>MX_SPI2_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>MX_TIM10_Init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, tim.o(.text.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM10_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>MX_TIM1_Init</STRONG> (Thumb, 292 bytes, Stack size 96 bytes, tim.o(.text.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>MX_TIM2_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>MX_TIM4_Init</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>MX_TIM5_Init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>MX_TIM8_Init</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, tim.o(.text.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usart.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[110]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[fc]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[10a]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main_1.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, main_1.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; robo_lib::RCProtocol::processByte(unsigned char const volatile*)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getRCProtocolPointer()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::processByte(unsigned char const volatile*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main_1.o(.text.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>SystemClock_Config()</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, main_1.o(.text._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>Task_Robot::Task_Robot__sub_object(Robot&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN10Task_RobotC2ER5Robot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_Robot::Task_Robot__sub_object(Robot&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::Task_Base__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::PlaySoundTask__sub_object(Robot&, unsigned short*, unsigned short, Play_Type, unsigned int)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::PlaySoundManageTask__sub_object(Robot&, unsigned int)
</UL>

<P><STRONG><a name="[60]"></a>Task_Robot::~Task_Robot__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN10Task_RobotD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> screwmotortask.o(.rodata._ZTV10Task_Robot)
</UL>
<P><STRONG><a name="[64]"></a>CANSendTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cansendtask.o(.text._ZN11CANSendTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV11CANSendTask)
</UL>
<P><STRONG><a name="[65]"></a>CANSendTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cansendtask.o(.text._ZN11CANSendTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV11CANSendTask)
</UL>
<P><STRONG><a name="[63]"></a>CANSendTask::update(unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cansendtask.o(.text._ZN11CANSendTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CANSendTask::update(unsigned int) &rArr; robo_lib::CanDevice::update(unsigned int) &rArr; robo_lib::CanDevice::pop(robo_lib::_CAN_Tx_Data_Pack_t*) &rArr; robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Pop(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::update(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV11CANSendTask)
</UL>
<P><STRONG><a name="[13f]"></a>CANSendTask::CANSendTask(Robot&, robo_lib::CanDevice*, unsigned int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cansendtask.o(.text._ZN11CANSendTaskC2ER5RobotPN8robo_lib9CanDeviceEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CANSendTask::CANSendTask(Robot&, robo_lib::CanDevice*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::Task_Base__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[1dc]"></a>CANSendTask::CANSendTask__sub_object(Robot&, robo_lib::CanDevice*, unsigned int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cansendtask.o(.text._ZN11CANSendTaskC2ER5RobotPN8robo_lib9CanDeviceEj), UNUSED)

<P><STRONG><a name="[62]"></a>CANSendTask::~CANSendTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cansendtask.o(.text._ZN11CANSendTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANSendTask::~CANSendTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cansendtask.o(.rodata._ZTV11CANSendTask)
</UL>
<P><STRONG><a name="[68]"></a>CANSyncTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cansynctask.o(.text._ZN11CANSyncTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> cansynctask.o(.rodata._ZTV11CANSyncTask)
</UL>
<P><STRONG><a name="[69]"></a>CANSyncTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cansynctask.o(.text._ZN11CANSyncTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> cansynctask.o(.rodata._ZTV11CANSyncTask)
</UL>
<P><STRONG><a name="[67]"></a>CANSyncTask::update(unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cansynctask.o(.text._ZN11CANSyncTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CANSyncTask::update(unsigned int) &rArr; robo_lib::CanDevice::sendAsync(robo_lib::_CAN_Tx_Data_Pack_t*) &rArr; robo_lib::CanDevice::push(robo_lib::_CAN_Tx_Data_Pack_t) &rArr; robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Push(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::sendAsync(robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cansynctask.o(.rodata._ZTV11CANSyncTask)
</UL>
<P><STRONG><a name="[142]"></a>CANSyncTask::CANSyncTask(Robot&, robo_lib::CanDevice*, unsigned short, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cansynctask.o(.text._ZN11CANSyncTaskC2ER5RobotPN8robo_lib9CanDeviceEtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CANSyncTask::CANSyncTask(Robot&, robo_lib::CanDevice*, unsigned short, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::Task_Base__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[1dd]"></a>CANSyncTask::CANSyncTask__sub_object(Robot&, robo_lib::CanDevice*, unsigned short, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cansynctask.o(.text._ZN11CANSyncTaskC2ER5RobotPN8robo_lib9CanDeviceEtj), UNUSED)

<P><STRONG><a name="[66]"></a>CANSyncTask::~CANSyncTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cansynctask.o(.text._ZN11CANSyncTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANSyncTask::~CANSyncTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cansynctask.o(.rodata._ZTV11CANSyncTask)
</UL>
<P><STRONG><a name="[17b]"></a>ControlBase::ControlBase__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_1.o(.text._ZN11ControlBaseC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::RoboBase__sub_object()
</UL>

<P><STRONG><a name="[6c]"></a>PlaySoundTask::init()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, playsound.o(.text._ZN13PlaySoundTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PlaySoundTask::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Helper::setBuzzerOff()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getHelper()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> playsound.o(.rodata._ZTV13PlaySoundTask)
</UL>
<P><STRONG><a name="[6d]"></a>PlaySoundTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, playsound.o(.text._ZN13PlaySoundTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> playsound.o(.rodata._ZTV13PlaySoundTask)
</UL>
<P><STRONG><a name="[6b]"></a>PlaySoundTask::update(unsigned int)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, playsound.o(.text._ZN13PlaySoundTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PlaySoundTask::update(unsigned int) &rArr; PlaySoundTask::playsong()
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Helper::setBuzzerOff()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getHelper()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::selfKill()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::playsong()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> playsound.o(.rodata._ZTV13PlaySoundTask)
</UL>
<P><STRONG><a name="[145]"></a>PlaySoundTask::playsong()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, playsound.o(.text._ZN13PlaySoundTask8playsongEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PlaySoundTask::playsong()
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Helper::setBuzzerFrequence(unsigned short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Helper::setBuzzerOff()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getHelper()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::update(unsigned int)
</UL>

<P><STRONG><a name="[148]"></a>PlaySoundTask::PlaySoundTask__sub_object(Robot&, unsigned short*, unsigned short, Play_Type, unsigned int)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, soundmanagetask.o(.text._ZN13PlaySoundTaskC2ER5RobotPtt9Play_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PlaySoundTask::PlaySoundTask__sub_object(Robot&, unsigned short*, unsigned short, Play_Type, unsigned int) &rArr; Task_Robot::Task_Robot__sub_object(Robot&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Robot::Task_Robot__sub_object(Robot&)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::playSound(Sound)
</UL>

<P><STRONG><a name="[6a]"></a>PlaySoundTask::~PlaySoundTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, playsound.o(.text._ZN13PlaySoundTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PlaySoundTask::~PlaySoundTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> playsound.o(.rodata._ZTV13PlaySoundTask)
</UL>
<P><STRONG><a name="[149]"></a>Task_RoboBase::Task_RoboBase__sub_object(RoboBase&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor_dm_task.o(.text._ZN13Task_RoboBaseC2ER8RoboBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_RoboBase::Task_RoboBase__sub_object(RoboBase&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::Task_Base__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[6e]"></a>Task_RoboBase::~Task_RoboBase__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_dm_task.o(.text._ZN13Task_RoboBaseD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> motor_dm_task.o(.rodata._ZTV13Task_RoboBase)
</UL>
<P><STRONG><a name="[14a]"></a>PIDControlTask::calculatePID(unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pidcontroltask.o(.text._ZN14PIDControlTask12calculatePIDEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PIDControlTask::calculatePID(unsigned int) &rArr; robo_lib::PID_Controller::calculateWithCPU(unsigned int) &rArr; robo_lib::PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::calculateWithCPU(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[14c]"></a>PIDControlTask::setPIDControllerExpect(float)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN14PIDControlTask22setPIDControllerExpectEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIDControlTask::setPIDControllerExpect(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::setExpect(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[14e]"></a>PIDControlTask::setPIDControllerParams(robo_lib::_PID_Params_t const&)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN14PIDControlTask22setPIDControllerParamsERKN8robo_lib13_PID_Params_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIDControlTask::setPIDControllerParams(robo_lib::_PID_Params_t const&) &rArr; robo_lib::PID_Controller::setParams(robo_lib::_PID_Params_t const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::setParams(robo_lib::_PID_Params_t const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[150]"></a>PIDControlTask::setPIDControllerFeedback(float)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN14PIDControlTask24setPIDControllerFeedbackEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIDControlTask::setPIDControllerFeedback(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::setFeedback(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[71]"></a>PIDControlTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pidcontroltask.o(.text._ZN14PIDControlTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
</UL>
<P><STRONG><a name="[72]"></a>PIDControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pidcontroltask.o(.text._ZN14PIDControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
</UL>
<P><STRONG><a name="[70]"></a>PIDControlTask::update(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pidcontroltask.o(.text._ZN14PIDControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PIDControlTask::update(unsigned int) &rArr; PIDControlTask::calculatePID(unsigned int) &rArr; robo_lib::PID_Controller::calculateWithCPU(unsigned int) &rArr; robo_lib::PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::calculatePID(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
</UL>
<P><STRONG><a name="[152]"></a>PIDControlTask::getOutput()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN14PIDControlTask9getOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIDControlTask::getOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::getOutput()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[154]"></a>PIDControlTask::PIDControlTask__sub_object(RoboBase&, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, motor_dm_task.o(.text._ZN14PIDControlTaskC2ER8RoboBasej))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIDControlTask::PIDControlTask__sub_object(RoboBase&, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::Task_Base__sub_object()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::PID_Controller()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[6f]"></a>PIDControlTask::~PIDControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pidcontroltask.o(.text._ZN14PIDControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIDControlTask::~PIDControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
</UL>
<P><STRONG><a name="[17a]"></a>_Init_Params_t::_Init_Params_t__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main_1.o(.text._ZN14_Init_Params_tC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Params::Params__sub_object()
</UL>

<P><STRONG><a name="[75]"></a>PlaySoundManageTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soundmanagetask.o(.text._ZN19PlaySoundManageTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
</UL>
<P><STRONG><a name="[76]"></a>PlaySoundManageTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soundmanagetask.o(.text._ZN19PlaySoundManageTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
</UL>
<P><STRONG><a name="[74]"></a>PlaySoundManageTask::update(unsigned int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, soundmanagetask.o(.text._ZN19PlaySoundManageTask6updateEj))
<BR>[Address Reference Count : 1]<UL><LI> soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
</UL>
<P><STRONG><a name="[156]"></a>PlaySoundManageTask::playSound(Sound)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, soundmanagetask.o(.text._ZN19PlaySoundManageTask9playSoundE5Sound))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PlaySoundManageTask::playSound(Sound) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Scheduler::registerTask(robo_lib::Task_Base*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getScheduler()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::PlaySoundTask__sub_object(Robot&, unsigned short*, unsigned short, Play_Type, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[15a]"></a>PlaySoundManageTask::PlaySoundManageTask__sub_object(Robot&, unsigned int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, robot.o(.text._ZN19PlaySoundManageTaskC2ER5Robotj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PlaySoundManageTask::PlaySoundManageTask__sub_object(Robot&, unsigned int) &rArr; Task_Robot::Task_Robot__sub_object(Robot&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Robot::Task_Robot__sub_object(Robot&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[73]"></a>PlaySoundManageTask::~PlaySoundManageTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, soundmanagetask.o(.text._ZN19PlaySoundManageTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PlaySoundManageTask::~PlaySoundManageTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
</UL>
<P><STRONG><a name="[15b]"></a>Motor_RM_PIDControlTask::setMotorInput(short)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN23Motor_RM_PIDControlTask13setMotorInputEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_RM_PIDControlTask::setMotorInput(short) &rArr; robo_lib::Motor_RM::setMotorInput(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::setMotorInput(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[164]"></a>Motor_RM_PIDControlTask::get_motor_backend_p()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN23Motor_RM_PIDControlTask19get_motor_backend_pEv))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[161]"></a>Motor_RM_PIDControlTask::getAngularVelocityTaskPointer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN23Motor_RM_PIDControlTask29getAngularVelocityTaskPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::init()
</UL>

<P><STRONG><a name="[79]"></a>Motor_RM_PIDControlTask::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask4initEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
</UL>
<P><STRONG><a name="[7a]"></a>Motor_RM_PIDControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
</UL>
<P><STRONG><a name="[78]"></a>Motor_RM_PIDControlTask::update(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_RM_PIDControlTask::update(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
</UL>
<P><STRONG><a name="[15d]"></a>Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTaskC2ER8RoboBaseRN8robo_lib9CanDeviceEtthaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; robo_lib::CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char**, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getMotors()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::PIDControlTask__sub_object(RoboBase&, unsigned int)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RoboBase::Task_RoboBase__sub_object(RoboBase&)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor::addBackend(robo_lib::Motor_Backend*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[1de]"></a>Motor_RM_PIDControlTask::Motor_RM_PIDControlTask__sub_object(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTaskC2ER8RoboBaseRN8robo_lib9CanDeviceEtthaj), UNUSED)

<P><STRONG><a name="[77]"></a>Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_rm_tasks.o(.text._ZN23Motor_RM_PIDControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
</UL>
<P><STRONG><a name="[7d]"></a>Srew_Motor_PIDControlTask::init()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTask4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Srew_Motor_PIDControlTask::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Scheduler::registerTask(robo_lib::Task_Base*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getScheduler()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::getAngularVelocityTaskPointer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
</UL>
<P><STRONG><a name="[7e]"></a>Srew_Motor_PIDControlTask::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTask6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
</UL>
<P><STRONG><a name="[7c]"></a>Srew_Motor_PIDControlTask::update(unsigned int)</STRONG> (Thumb, 392 bytes, Stack size 192 bytes, screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTask6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Srew_Motor_PIDControlTask::update(unsigned int) &rArr; PlaySoundManageTask::playSound(Sound) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::getMeasurement()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Helper::setLED(unsigned char, unsigned char, unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::getRCData()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getHelper()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getRCProtocol()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::get_play_sound()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::get_Params()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::getAngularVelocityTaskPointer()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::get_motor_backend_p()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::setMotorInput(short)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::playSound(Sound)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::getOutput()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerFeedback(float)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerExpect(float)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
</UL>
<P><STRONG><a name="[16c]"></a>Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTaskC2ER5RobotPN8robo_lib18_Motor_RM_Params_tEPNS2_13_PID_Params_tES6_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int) &rArr; Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; robo_lib::CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char**, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::setInterval(unsigned int)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::setParams(robo_lib::_Motor_RM_Params_t)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getCAN2Device()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::getCAN1Device()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::getAngularVelocityTaskPointer()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::get_motor_backend_p()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerParams(robo_lib::_PID_Params_t const&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Robot::Task_Robot__sub_object(Robot&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[1df]"></a>Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask__sub_object(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTaskC2ER5RobotPN8robo_lib18_Motor_RM_Params_tEPNS2_13_PID_Params_tES6_j), UNUSED)

<P><STRONG><a name="[7b]"></a>Srew_Motor_PIDControlTask::~Srew_Motor_PIDControlTask__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN25Srew_Motor_PIDControlTaskD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Srew_Motor_PIDControlTask::~Srew_Motor_PIDControlTask__deallocating() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::~Task_Base__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
</UL>
<P><STRONG><a name="[166]"></a>Robot::get_Params()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN5Robot10get_ParamsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Robot::get_Params() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[167]"></a>Robot::get_play_sound()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN5Robot14get_play_soundEv))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[80]"></a>Robot::run()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, robot.o(.text._ZN5Robot3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Robot::run() &rArr; robo_lib::Scheduler::run() &rArr; robo_lib::Scheduler::unregisterTask(robo_lib::Task_Base**)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Scheduler::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot.o(.rodata._ZTV5Robot)
</UL>
<P><STRONG><a name="[7f]"></a>Robot::init()</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, robot.o(.text._ZN5Robot4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Robot::init() &rArr; Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int) &rArr; Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int) &rArr; robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; robo_lib::CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char**, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::init(__CAN_HandleTypeDef*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned short)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Task_Base::setInterval(unsigned int)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Scheduler::registerTask(robo_lib::Task_Base*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::PlaySoundManageTask__sub_object(Robot&, unsigned int)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Params::initMotorsParams(unsigned char)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSyncTask::CANSyncTask(Robot&, robo_lib::CanDevice*, unsigned short, unsigned int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::CANSendTask(Robot&, robo_lib::CanDevice*, unsigned int)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::USART1_DMA_Tx_Init()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot.o(.rodata._ZTV5Robot)
</UL>
<P><STRONG><a name="[177]"></a>Robot::Robot__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main_1.o(.text._ZN5RobotC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Robot::Robot__sub_object() &rArr; RoboBase::RoboBase__sub_object() &rArr; robo_lib::InertialSensor::InertialSensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::RoboBase__sub_object()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Params::Params__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[172]"></a>Params::initMotorsParams(unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, params.o(.text._ZN6Params16initMotorsParamsEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Params::initMotorsParams(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[179]"></a>Params::Params__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main_1.o(.text._ZN6ParamsC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Params::Params__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init_Params_t::_Init_Params_t__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[158]"></a>RoboBase::getScheduler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8RoboBase12getSchedulerEv))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::init()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::playSound(Sound)
</UL>

<P><STRONG><a name="[16d]"></a>RoboBase::getCAN1Device()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8RoboBase13getCAN1DeviceEv))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[16e]"></a>RoboBase::getCAN2Device()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8RoboBase13getCAN2DeviceEv))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[162]"></a>RoboBase::getRCProtocol()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8RoboBase13getRCProtocolEv))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[d6]"></a>RoboBase::getCAN1DevicePointer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main_1.o(.text._ZN8RoboBase20getCAN1DevicePointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[d7]"></a>RoboBase::getCAN2DevicePointer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main_1.o(.text._ZN8RoboBase20getCAN2DevicePointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[137]"></a>RoboBase::getRCProtocolPointer()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main_1.o(.text._ZN8RoboBase20getRCProtocolPointerEv))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>RoboBase::getHelper()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8RoboBase9getHelperEv))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::playsong()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::update(unsigned int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::init()
</UL>

<P><STRONG><a name="[15e]"></a>RoboBase::getMotors()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_dm_task.o(.text._ZN8RoboBase9getMotorsEv))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[178]"></a>RoboBase::RoboBase__sub_object()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main_1.o(.text._ZN8RoboBaseC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RoboBase::RoboBase__sub_object() &rArr; robo_lib::InertialSensor::InertialSensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::InertialSensor::InertialSensor()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::CanDevice()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Helper::Helper__sub_object()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor::Motor__sub_object()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::RCProtocol__sub_object()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlBase::ControlBase__sub_object()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Scheduler::Scheduler()
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
</UL>

<P><STRONG><a name="[5e]"></a>RoboBase::~RoboBase__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main_1.o(.text._ZN8RoboBaseD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RoboBase::~RoboBase__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::~RCProtocol__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[184]"></a>robo_lib::RCProtocol::addBackend(robo_lib::RCProtocol_Backend*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rcprotocol.o(.text._ZN8robo_lib10RCProtocol10addBackendEPNS_18RCProtocol_BackendE))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::init()
</UL>

<P><STRONG><a name="[138]"></a>robo_lib::RCProtocol::processByte(unsigned char const volatile*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rcprotocol.o(.text._ZN8robo_lib10RCProtocol11processByteEPVKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_lib::RCProtocol::processByte(unsigned char const volatile*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>robo_lib::RCProtocol::init()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rcprotocol.o(.text._ZN8robo_lib10RCProtocol4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = robo_lib::RCProtocol::init() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol_DBUS::RCProtocol_DBUS__sub_object(robo_lib::RCProtocol&)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::addBackend(robo_lib::RCProtocol_Backend*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[163]"></a>robo_lib::RCProtocol::getRCData()</STRONG> (Thumb, 62 bytes, Stack size 44 bytes, screwmotortask.o(.text._ZN8robo_lib10RCProtocol9getRCDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = robo_lib::RCProtocol::getRCData()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[17e]"></a>robo_lib::RCProtocol::RCProtocol__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_1.o(.text._ZN8robo_lib10RCProtocolC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::RoboBase__sub_object()
</UL>

<P><STRONG><a name="[182]"></a>robo_lib::RCProtocol::~RCProtocol__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_1.o(.text._ZN8robo_lib10RCProtocolD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::~RoboBase__sub_object()
</UL>

<P><STRONG><a name="[81]"></a>robo_lib::Motor_Backend::publishMeasurement()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, motor_backend.o(.text._ZN8robo_lib13Motor_Backend18publishMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = robo_lib::Motor_Backend::publishMeasurement()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
<LI> motor_backend.o(.rodata._ZTVN8robo_lib13Motor_BackendE)
</UL>
<P><STRONG><a name="[190]"></a>robo_lib::Motor_Backend::Motor_Backend__sub_object(robo_lib::Motor&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motor_backend.o(.text._ZN8robo_lib13Motor_BackendC2ERNS_5MotorE))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
</UL>

<P><STRONG><a name="[180]"></a>robo_lib::InertialSensor::InertialSensor()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, inertialsensor.o(.text._ZN8robo_lib14InertialSensorC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = robo_lib::InertialSensor::InertialSensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Vector3&lang;float&rang;::Vector3__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::RoboBase__sub_object()
</UL>

<P><STRONG><a name="[1e0]"></a>robo_lib::InertialSensor::InertialSensor__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, inertialsensor.o(.text._ZN8robo_lib14InertialSensorC2Ev), UNUSED)

<P><STRONG><a name="[151]"></a>robo_lib::PID_Controller::setFeedback(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8robo_lib14PID_Controller11setFeedbackEf))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerFeedback(float)
</UL>

<P><STRONG><a name="[14b]"></a>robo_lib::PID_Controller::calculateWithCPU(unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pidcontroltask.o(.text._ZN8robo_lib14PID_Controller16calculateWithCPUEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = robo_lib::PID_Controller::calculateWithCPU(unsigned int) &rArr; robo_lib::PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::calculatePID(unsigned int)
</UL>

<P><STRONG><a name="[186]"></a>robo_lib::PID_Controller::calculateWithCPU(unsigned int, float, float, float)</STRONG> (Thumb, 748 bytes, Stack size 32 bytes, pid_controller.o(.text._ZN8robo_lib14PID_Controller16calculateWithCPUEjfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = robo_lib::PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::calculateWithCPU(unsigned int)
</UL>

<P><STRONG><a name="[153]"></a>robo_lib::PID_Controller::getOutput()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8robo_lib14PID_Controller9getOutputEv))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::getOutput()
</UL>

<P><STRONG><a name="[14d]"></a>robo_lib::PID_Controller::setExpect(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8robo_lib14PID_Controller9setExpectEf))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerExpect(float)
</UL>

<P><STRONG><a name="[14f]"></a>robo_lib::PID_Controller::setParams(robo_lib::_PID_Params_t const&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pid_controller.o(.text._ZN8robo_lib14PID_Controller9setParamsERKNS_13_PID_Params_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = robo_lib::PID_Controller::setParams(robo_lib::_PID_Params_t const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::setPIDControllerParams(robo_lib::_PID_Params_t const&)
</UL>

<P><STRONG><a name="[155]"></a>robo_lib::PID_Controller::PID_Controller()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pid_controller.o(.text._ZN8robo_lib14PID_ControllerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::PIDControlTask__sub_object(RoboBase&, unsigned int)
</UL>

<P><STRONG><a name="[1e1]"></a>robo_lib::PID_Controller::PID_Controller__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pid_controller.o(.text._ZN8robo_lib14PID_ControllerC2Ev), UNUSED)

<P><STRONG><a name="[83]"></a>robo_lib::RCProtocol_DBUS::processByte(unsigned char const volatile*)</STRONG> (Thumb, 266 bytes, Stack size 88 bytes, rcprotocol_dbus.o(.text._ZN8robo_lib15RCProtocol_DBUS11processByteEPVKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = robo_lib::RCProtocol_DBUS::processByte(unsigned char const volatile*) &rArr; robo_lib::RCProtocol_Backend::publishRCData(robo_lib::RC_Data)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol_Backend::publishRCData(robo_lib::RC_Data)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::micros()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rcprotocol_dbus.o(.rodata._ZTVN8robo_lib15RCProtocol_DBUSE)
</UL>
<P><STRONG><a name="[82]"></a>robo_lib::RCProtocol_DBUS::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rcprotocol_dbus.o(.text._ZN8robo_lib15RCProtocol_DBUS4initEv))
<BR>[Address Reference Count : 1]<UL><LI> rcprotocol_dbus.o(.rodata._ZTVN8robo_lib15RCProtocol_DBUSE)
</UL>
<P><STRONG><a name="[84]"></a>robo_lib::RCProtocol_DBUS::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rcprotocol_dbus.o(.text._ZN8robo_lib15RCProtocol_DBUS6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> rcprotocol_dbus.o(.rodata._ZTVN8robo_lib15RCProtocol_DBUSE)
</UL>
<P><STRONG><a name="[183]"></a>robo_lib::RCProtocol_DBUS::RCProtocol_DBUS__sub_object(robo_lib::RCProtocol&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rcprotocol.o(.text._ZN8robo_lib15RCProtocol_DBUSC2ERNS_10RCProtocolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_lib::RCProtocol_DBUS::RCProtocol_DBUS__sub_object(robo_lib::RCProtocol&)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol_Backend::RCProtocol_Backend__sub_object(robo_lib::RCProtocol&)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::init()
</UL>

<P><STRONG><a name="[188]"></a>robo_lib::RCProtocol_Backend::publishRCData(robo_lib::RC_Data)</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, rcprotocol_backend.o(.text._ZN8robo_lib18RCProtocol_Backend13publishRCDataENS_7RC_DataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = robo_lib::RCProtocol_Backend::publishRCData(robo_lib::RC_Data)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol_DBUS::processByte(unsigned char const volatile*)
</UL>

<P><STRONG><a name="[189]"></a>robo_lib::RCProtocol_Backend::RCProtocol_Backend__sub_object(robo_lib::RCProtocol&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rcprotocol_backend.o(.text._ZN8robo_lib18RCProtocol_BackendC2ERNS_10RCProtocolE))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol_DBUS::RCProtocol_DBUS__sub_object(robo_lib::RCProtocol&)
</UL>

<P><STRONG><a name="[176]"></a>robo_lib::USART1_DMA_Tx_Init()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uartdriver.o(.text._ZN8robo_lib18USART1_DMA_Tx_InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[187]"></a>robo_lib::Error::Error_Handler()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, error.o(.text._ZN8robo_lib5Error13Error_HandlerEv))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char**, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::addRxLink(robo_lib::_CAN_Rx_Data_Pack_t*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Error::Error_Handler()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::PID_Controller::calculateWithCPU(unsigned int, float, float, float)
</UL>

<P><STRONG><a name="[160]"></a>robo_lib::Motor::addBackend(robo_lib::Motor_Backend*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, motor.o(.text._ZN8robo_lib5Motor10addBackendEPNS_13Motor_BackendE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_lib::Motor::addBackend(robo_lib::Motor_Backend*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[17f]"></a>robo_lib::Motor::Motor__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_1.o(.text._ZN8robo_lib5MotorC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::RoboBase__sub_object()
</UL>

<P><STRONG><a name="[18a]"></a>robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Init(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, candevice.o(.text._ZN8robo_lib5QueueINS_19_CAN_Tx_Data_Pack_tEE10Queue_InitEPNS_19QUEUE_HandleTypeDefIS1_EEPS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Init(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Clear(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::init(__CAN_HandleTypeDef*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned short)
</UL>

<P><STRONG><a name="[198]"></a>robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Push(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t)</STRONG> (Thumb, 82 bytes, Stack size 36 bytes, candevice.o(.text._ZN8robo_lib5QueueINS_19_CAN_Tx_Data_Pack_tEE10Queue_PushEPNS_19QUEUE_HandleTypeDefIS1_EES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Push(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::push(robo_lib::_CAN_Tx_Data_Pack_t)
</UL>

<P><STRONG><a name="[18b]"></a>robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Clear(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, candevice.o(.text._ZN8robo_lib5QueueINS_19_CAN_Tx_Data_Pack_tEE11Queue_ClearEPNS_19QUEUE_HandleTypeDefIS1_EE))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Init(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned int)
</UL>

<P><STRONG><a name="[194]"></a>robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Pop(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, candevice.o(.text._ZN8robo_lib5QueueINS_19_CAN_Tx_Data_Pack_tEE9Queue_PopEPNS_19QUEUE_HandleTypeDefIS1_EEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Pop(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::pop(robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>

<P><STRONG><a name="[144]"></a>robo_lib::Helper::setBuzzerOff()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, helper.o(.text._ZN8robo_lib6Helper12setBuzzerOffEv))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::playsong()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::update(unsigned int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::init()
</UL>

<P><STRONG><a name="[147]"></a>robo_lib::Helper::setBuzzerFrequence(unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, helper.o(.text._ZN8robo_lib6Helper18setBuzzerFrequenceEt))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::playsong()
</UL>

<P><STRONG><a name="[168]"></a>robo_lib::Helper::setLED(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, helper.o(.text._ZN8robo_lib6Helper6setLEDEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = robo_lib::Helper::setLED(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[17d]"></a>robo_lib::Helper::Helper__sub_object()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main_1.o(.text._ZN8robo_lib6HelperC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_lib::Helper::Helper__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::RoboBase__sub_object()
</UL>

<P><STRONG><a name="[d9]"></a>robo_lib::micros()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, scheduler_common.o(.text._ZN8robo_lib6microsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_lib::micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::getCurrentMicrosTim5()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Scheduler::run()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol_DBUS::processByte(unsigned char const volatile*)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::updateMotorMeasurement()
</UL>

<P><STRONG><a name="[185]"></a>robo_lib::Vector3&lang;float&rang;::Vector3__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ahrs.o(.text._ZN8robo_lib7Vector3IfEC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::InertialSensor::InertialSensor()
</UL>

<P><STRONG><a name="[18e]"></a>robo_lib::Motor_RM::syncCANData()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8robo_lib8Motor_RM11syncCANDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::setMotorInput(short)
</UL>

<P><STRONG><a name="[15c]"></a>robo_lib::Motor_RM::setMotorInput(short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screwmotortask.o(.text._ZN8robo_lib8Motor_RM13setMotorInputEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_lib::Motor_RM::setMotorInput(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::syncCANData()
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::setMotorInput(short)
</UL>

<P><STRONG><a name="[165]"></a>robo_lib::Motor_RM::getMeasurement()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, screwmotortask.o(.text._ZN8robo_lib8Motor_RM14getMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = robo_lib::Motor_RM::getMeasurement()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[88]"></a>robo_lib::Motor_RM::updateMeasurement()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor_rm.o(.text._ZN8robo_lib8Motor_RM17updateMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = robo_lib::Motor_RM::updateMeasurement() &rArr; robo_lib::Motor_RM::updateMotorMeasurement() &rArr; robo_lib::micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::updateMotorMeasurement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
</UL>
<P><STRONG><a name="[18f]"></a>robo_lib::Motor_RM::updateMotorMeasurement()</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, motor_rm.o(.text._ZN8robo_lib8Motor_RM22updateMotorMeasurementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = robo_lib::Motor_RM::updateMotorMeasurement() &rArr; robo_lib::micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::update(unsigned int)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::updateMeasurement()
</UL>

<P><STRONG><a name="[85]"></a>robo_lib::Motor_RM::init()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motor_rm.o(.text._ZN8robo_lib8Motor_RM4initEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
</UL>
<P><STRONG><a name="[87]"></a>robo_lib::Motor_RM::uninit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motor_rm.o(.text._ZN8robo_lib8Motor_RM6uninitEv))
<BR>[Address Reference Count : 1]<UL><LI> motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
</UL>
<P><STRONG><a name="[86]"></a>robo_lib::Motor_RM::update(unsigned int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motor_rm.o(.text._ZN8robo_lib8Motor_RM6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = robo_lib::Motor_RM::update(unsigned int) &rArr; robo_lib::Motor_RM::updateMotorMeasurement() &rArr; robo_lib::micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::updateMotorMeasurement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_rm.o(.rodata._ZTVN8robo_lib8Motor_RME)
</UL>
<P><STRONG><a name="[16f]"></a>robo_lib::Motor_RM::setParams(robo_lib::_Motor_RM_Params_t)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, screwmotortask.o(.text._ZN8robo_lib8Motor_RM9setParamsENS_18_Motor_RM_Params_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = robo_lib::Motor_RM::setParams(robo_lib::_Motor_RM_Params_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
</UL>

<P><STRONG><a name="[15f]"></a>robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, motor_rm.o(.text._ZN8robo_lib8Motor_RMC2ERNS_5MotorERNS_9CanDeviceEttha))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char) &rArr; robo_lib::CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char**, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char**, unsigned char)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::addRxLink(robo_lib::_CAN_Rx_Data_Pack_t*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_Backend::Motor_Backend__sub_object(robo_lib::Motor&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
</UL>

<P><STRONG><a name="[1e2]"></a>robo_lib::Motor_RM::Motor_RM__sub_object(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, motor_rm.o(.text._ZN8robo_lib8Motor_RMC2ERNS_5MotorERNS_9CanDeviceEttha), UNUSED)

<P><STRONG><a name="[193]"></a>robo_lib::CanDevice::pop(robo_lib::_CAN_Tx_Data_Pack_t*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, candevice.o(.text._ZN8robo_lib9CanDevice3popEPNS_19_CAN_Tx_Data_Pack_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = robo_lib::CanDevice::pop(robo_lib::_CAN_Tx_Data_Pack_t*) &rArr; robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Pop(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Pop(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::update(unsigned int)
</UL>

<P><STRONG><a name="[173]"></a>robo_lib::CanDevice::init(__CAN_HandleTypeDef*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned short)</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, candevice.o(.text._ZN8robo_lib9CanDevice4initEP19__CAN_HandleTypeDefPNS_19_CAN_Tx_Data_Pack_tEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = robo_lib::CanDevice::init(__CAN_HandleTypeDef*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned short) &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Init(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[197]"></a>robo_lib::CanDevice::push(robo_lib::_CAN_Tx_Data_Pack_t)</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, candevice.o(.text._ZN8robo_lib9CanDevice4pushENS_19_CAN_Tx_Data_Pack_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = robo_lib::CanDevice::push(robo_lib::_CAN_Tx_Data_Pack_t) &rArr; robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Push(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Push(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::sendAsync(robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>

<P><STRONG><a name="[13e]"></a>robo_lib::CanDevice::update(unsigned int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, candevice.o(.text._ZN8robo_lib9CanDevice6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = robo_lib::CanDevice::update(unsigned int) &rArr; robo_lib::CanDevice::pop(robo_lib::_CAN_Tx_Data_Pack_t*) &rArr; robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Pop(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetTxMailboxesFreeLevel
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::pop(robo_lib::_CAN_Tx_Data_Pack_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::update(unsigned int)
</UL>

<P><STRONG><a name="[192]"></a>robo_lib::CanDevice::addRxLink(robo_lib::_CAN_Rx_Data_Pack_t*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, candevice.o(.text._ZN8robo_lib9CanDevice9addRxLinkEPNS_19_CAN_Rx_Data_Pack_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_lib::CanDevice::addRxLink(robo_lib::_CAN_Rx_Data_Pack_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
</UL>

<P><STRONG><a name="[191]"></a>robo_lib::CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char**, unsigned char)</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, candevice.o(.text._ZN8robo_lib9CanDevice9addTxLinkEthhPPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = robo_lib::CanDevice::addTxLink(unsigned short, unsigned char, unsigned char, unsigned char**, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Error::Error_Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Motor_RM::Motor_RM(robo_lib::Motor&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char)
</UL>

<P><STRONG><a name="[141]"></a>robo_lib::CanDevice::sendAsync(robo_lib::_CAN_Tx_Data_Pack_t*)</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, candevice.o(.text._ZN8robo_lib9CanDevice9sendAsyncEPNS_19_CAN_Tx_Data_Pack_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = robo_lib::CanDevice::sendAsync(robo_lib::_CAN_Tx_Data_Pack_t*) &rArr; robo_lib::CanDevice::push(robo_lib::_CAN_Tx_Data_Pack_t) &rArr; robo_lib::Queue&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;::Queue_Push(robo_lib::QUEUE_HandleTypeDef&lang;robo_lib::_CAN_Tx_Data_Pack_t&rang;*, robo_lib::_CAN_Tx_Data_Pack_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::CanDevice::push(robo_lib::_CAN_Tx_Data_Pack_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSyncTask::update(unsigned int)
</UL>

<P><STRONG><a name="[181]"></a>robo_lib::CanDevice::CanDevice()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, candevice.o(.text._ZN8robo_lib9CanDeviceC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::RoboBase__sub_object()
</UL>

<P><STRONG><a name="[1e3]"></a>robo_lib::CanDevice::CanDevice__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, candevice.o(.text._ZN8robo_lib9CanDeviceC2Ev), UNUSED)

<P><STRONG><a name="[159]"></a>robo_lib::Scheduler::registerTask(robo_lib::Task_Base*)</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, scheduler.o(.text._ZN8robo_lib9Scheduler12registerTaskEPNS_9Task_BaseE))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::init()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::playSound(Sound)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[19b]"></a>robo_lib::Scheduler::unregisterTask(robo_lib::Task_Base**)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, scheduler.o(.text._ZN8robo_lib9Scheduler14unregisterTaskEPPNS_9Task_BaseE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = robo_lib::Scheduler::unregisterTask(robo_lib::Task_Base**)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Scheduler::run()
</UL>

<P><STRONG><a name="[171]"></a>robo_lib::Scheduler::run()</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, scheduler.o(.text._ZN8robo_lib9Scheduler3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = robo_lib::Scheduler::run() &rArr; robo_lib::Scheduler::unregisterTask(robo_lib::Task_Base**)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::Scheduler::unregisterTask(robo_lib::Task_Base**)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::run()
</UL>

<P><STRONG><a name="[17c]"></a>robo_lib::Scheduler::Scheduler()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scheduler.o(.text._ZN8robo_lib9SchedulerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboBase::RoboBase__sub_object()
</UL>

<P><STRONG><a name="[1e4]"></a>robo_lib::Scheduler::Scheduler__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scheduler.o(.text._ZN8robo_lib9SchedulerC2Ev), UNUSED)

<P><STRONG><a name="[89]"></a>robo_lib::SimpleAdd&lang;float&rang;::operator()(float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, advancedadd.o(.text._ZN8robo_lib9SimpleAddIfEclEff))
<BR>[Address Reference Count : 1]<UL><LI> advancedadd.o(.rodata._ZTVN8robo_lib9SimpleAddIfEE)
</UL>
<P><STRONG><a name="[170]"></a>robo_lib::Task_Base::setInterval(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8robo_lib9Task_Base11setIntervalEj))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[146]"></a>robo_lib::Task_Base::selfKill()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, playsound.o(.text._ZN8robo_lib9Task_Base8selfKillEv))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::update(unsigned int)
</UL>

<P><STRONG><a name="[13d]"></a>robo_lib::Task_Base::Task_Base__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8robo_lib9Task_BaseC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Robot::Task_Robot__sub_object(Robot&)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::PIDControlTask__sub_object(RoboBase&, unsigned int)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RoboBase::Task_RoboBase__sub_object(RoboBase&)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSyncTask::CANSyncTask(Robot&, robo_lib::CanDevice*, unsigned short, unsigned int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::CANSendTask(Robot&, robo_lib::CanDevice*, unsigned int)
</UL>

<P><STRONG><a name="[8a]"></a>robo_lib::Task_Base::~Task_Base__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8robo_lib9Task_BaseD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> screwmotortask.o(.rodata._ZTVN8robo_lib9Task_BaseE)
</UL>
<P><STRONG><a name="[5f]"></a>robo_lib::Task_Base::~Task_Base__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screwmotortask.o(.text._ZN8robo_lib9Task_BaseD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::~Srew_Motor_PIDControlTask__deallocating()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::~PlaySoundManageTask__deallocating()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::~PlaySoundTask__deallocating()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::~PIDControlTask__deallocating()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSyncTask::~CANSyncTask__deallocating()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::~CANSendTask__deallocating()
</UL>
<BR>[Address Reference Count : 10]<UL><LI> soundmanagetask.o(.rodata._ZTV19PlaySoundManageTask)
<LI> screwmotortask.o(.rodata._ZTV25Srew_Motor_PIDControlTask)
<LI> screwmotortask.o(.rodata._ZTV10Task_Robot)
<LI> screwmotortask.o(.rodata._ZTVN8robo_lib9Task_BaseE)
<LI> cansynctask.o(.rodata._ZTV11CANSyncTask)
<LI> cansendtask.o(.rodata._ZTV11CANSendTask)
<LI> motor_rm_tasks.o(.rodata._ZTV23Motor_RM_PIDControlTask)
<LI> pidcontroltask.o(.rodata._ZTV14PIDControlTask)
<LI> motor_dm_task.o(.rodata._ZTV13Task_RoboBase)
<LI> playsound.o(.rodata._ZTV13PlaySoundTask)
</UL>
<P><STRONG><a name="[19c]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[140]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::~Srew_Motor_PIDControlTask__deallocating()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::~PlaySoundManageTask__deallocating()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundTask::~PlaySoundTask__deallocating()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIDControlTask::~PIDControlTask__deallocating()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::~Motor_RM_PIDControlTask__deallocating()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSyncTask::~CANSyncTask__deallocating()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSendTask::~CANSendTask__deallocating()
</UL>

<P><STRONG><a name="[157]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::Srew_Motor_PIDControlTask(Robot&, robo_lib::_Motor_RM_Params_t*, robo_lib::_PID_Params_t*, robo_lib::_PID_Params_t*, unsigned int)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_RM_PIDControlTask::Motor_RM_PIDControlTask(RoboBase&, robo_lib::CanDevice&, unsigned short, unsigned short, unsigned char, signed char, unsigned int)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlaySoundManageTask::playSound(Sound)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::RCProtocol::init()
</UL>

<P><STRONG><a name="[61]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 7]<UL><LI> screwmotortask.o(.rodata._ZTV10Task_Robot)
<LI> screwmotortask.o(.rodata._ZTVN8robo_lib9Task_BaseE)
<LI> motor_backend.o(.rodata._ZTVN8robo_lib13Motor_BackendE)
<LI> rcprotocol_backend.o(.rodata._ZTVN8robo_lib18RCProtocol_BackendE)
<LI> motor_dm_task.o(.rodata._ZTV13Task_RoboBase)
<LI> main_1.o(.rodata._ZTV8RoboBase)
<LI> main_1.o(.rodata._ZTV11ControlBase)
</UL>
<P><STRONG><a name="[19d]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[9f]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main_1.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_TIM8_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::run()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[19e]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[1a1]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Srew_Motor_PIDControlTask::update(unsigned int)
</UL>

<P><STRONG><a name="[1e5]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1a0]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[19f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[1e6]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[1e7]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[1e8]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[94]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1e9]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1ea]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c2]"></a>ADC_Init</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[df]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[de]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[eb]"></a>NVIC_EncodePriority</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[f6]"></a>SysTick_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[e9]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[ea]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ec]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ed]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[fe]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[109]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[10b]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[10c]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[fb]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[fd]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[5d]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[116]"></a>UART_EndRxTransfer</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[113]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>UART_Receive_IT</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>UART_SetConfig</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[115]"></a>UART_Transmit_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>robo_lib::getCurrentMicrosTim5()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_common.o(.text._ZN8robo_libL20getCurrentMicrosTim5Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_lib::micros()
</UL>

<P><STRONG><a name="[8b]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main_1.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(.init_array)
</UL>
<P><STRONG><a name="[139]"></a>__cxx_global_var_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main_1.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot__sub_object()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
